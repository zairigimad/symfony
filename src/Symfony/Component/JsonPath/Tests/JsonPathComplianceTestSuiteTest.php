<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\Component\JsonPath\Tests;

use PHPUnit\Framework\TestCase;
use Symfony\Component\JsonPath\Exception\JsonCrawlerException;
use Symfony\Component\JsonPath\JsonCrawler;

final class JsonPathComplianceTestSuiteTest extends TestCase
{
    private const UNSUPPORTED_TEST_CASES = [
        'basic, multiple selectors, name and index, array data',
        'basic, multiple selectors, name and index, object data',
        'basic, multiple selectors, index and slice',
        'basic, multiple selectors, index and slice, overlapping',
        'basic, multiple selectors, wildcard and index',
        'basic, multiple selectors, wildcard and name',
        'basic, multiple selectors, wildcard and slice',
        'basic, multiple selectors, multiple wildcards',
        'filter, existence, without segments',
        'filter, existence',
        'filter, existence, present with null',
        'filter, absolute existence, without segments',
        'filter, absolute existence, with segments',
        'filter, equals string, single quotes',
        'filter, equals numeric string, single quotes',
        'filter, equals string, double quotes',
        'filter, equals numeric string, double quotes',
        'filter, equals number',
        'filter, equals null',
        'filter, equals null, absent from data',
        'filter, equals true',
        'filter, equals false',
        'filter, equals self',
        'filter, absolute, equals self',
        'filter, equals, absent from index selector equals absent from name selector',
        'filter, deep equality, arrays',
        'filter, deep equality, objects',
        'filter, not-equals string, single quotes',
        'filter, not-equals numeric string, single quotes',
        'filter, not-equals string, single quotes, different type',
        'filter, not-equals string, double quotes',
        'filter, not-equals numeric string, double quotes',
        'filter, not-equals string, double quotes, different types',
        'filter, not-equals number',
        'filter, not-equals number, different types',
        'filter, not-equals null',
        'filter, not-equals null, absent from data',
        'filter, not-equals true',
        'filter, not-equals false',
        'filter, less than string, single quotes',
        'filter, less than string, double quotes',
        'filter, less than number',
        'filter, less than null',
        'filter, less than true',
        'filter, less than false',
        'filter, less than or equal to string, single quotes',
        'filter, less than or equal to string, double quotes',
        'filter, less than or equal to number',
        'filter, less than or equal to null',
        'filter, less than or equal to true',
        'filter, less than or equal to false',
        'filter, greater than string, single quotes',
        'filter, greater than string, double quotes',
        'filter, greater than number',
        'filter, greater than null',
        'filter, greater than true',
        'filter, greater than false',
        'filter, greater than or equal to string, single quotes',
        'filter, greater than or equal to string, double quotes',
        'filter, greater than or equal to number',
        'filter, greater than or equal to null',
        'filter, greater than or equal to true',
        'filter, greater than or equal to false',
        'filter, exists and not-equals null, absent from data',
        'filter, exists and exists, data false',
        'filter, exists or exists, data false',
        'filter, and',
        'filter, or',
        'filter, not expression',
        'filter, not exists',
        'filter, not exists, data null',
        'filter, non-singular existence, wildcard',
        'filter, non-singular existence, multiple',
        'filter, non-singular existence, slice',
        'filter, non-singular existence, negated',
        'filter, nested',
        'filter, name segment on primitive, selects nothing',
        'filter, name segment on array, selects nothing',
        'filter, index segment on object, selects nothing',
        'filter, followed by name selector',
        'filter, followed by child segment that selects multiple elements',
        'filter, multiple selectors',
        'filter, multiple selectors, comparison',
        'filter, multiple selectors, overlapping',
        'filter, multiple selectors, filter and index',
        'filter, multiple selectors, filter and wildcard',
        'filter, multiple selectors, filter and slice',
        'filter, multiple selectors, comparison filter, index and slice',
        'filter, equals number, zero and negative zero',
        'filter, equals number, negative zero and zero',
        'filter, equals number, with and without decimal fraction',
        'filter, equals number, exponent',
        'filter, equals number, exponent upper e',
        'filter, equals number, positive exponent',
        'filter, equals number, negative exponent',
        'filter, equals number, exponent 0',
        'filter, equals number, exponent -0',
        'filter, equals number, exponent +0',
        'filter, equals number, exponent leading -0',
        'filter, equals number, exponent +00',
        'filter, equals number, decimal fraction',
        'filter, equals number, decimal fraction, trailing 0',
        'filter, equals number, decimal fraction, exponent',
        'filter, equals number, decimal fraction, positive exponent',
        'filter, equals number, decimal fraction, negative exponent',
        'filter, equals, empty node list and empty node list',
        'filter, equals, empty node list and special nothing',
        'filter, object data',
        'filter, and binds more tightly than or',
        'filter, left to right evaluation',
        'filter, group terms, right',
        'filter, string literal, single quote in double quotes',
        'filter, string literal, double quote in single quotes',
        'filter, string literal, escaped single quote in single quotes',
        'filter, string literal, escaped double quote in double quotes',
        'name selector, double quotes, escaped reverse solidus',
        'name selector, single quotes, escaped reverse solidus',
        'slice selector, slice selector with everything omitted, long form',
        'slice selector, start, min exact',
        'slice selector, start, max exact',
        'slice selector, end, min exact',
        'slice selector, end, max exact',
        'functions, length, arg is special nothing',
        'functions, match, don\'t select match',
        'functions, match, select non-match',
        'functions, match, arg is a function expression',
        'functions, search, don\'t select match',
        'functions, search, select non-match',
        'functions, search, arg is a function expression',
        'whitespace, filter, space between question mark and expression',
        'whitespace, filter, newline between question mark and expression',
        'whitespace, filter, tab between question mark and expression',
        'whitespace, filter, return between question mark and expression',
        'whitespace, filter, space between question mark and parenthesized expression',
        'whitespace, filter, newline between question mark and parenthesized expression',
        'whitespace, filter, tab between question mark and parenthesized expression',
        'whitespace, filter, return between question mark and parenthesized expression',
        'whitespace, filter, space between bracket and question mark',
        'whitespace, filter, newline between bracket and question mark',
        'whitespace, filter, tab between bracket and question mark',
        'whitespace, filter, return between bracket and question mark',
        'whitespace, functions, newline between parenthesis and arg',
        'whitespace, functions, newline between arg and comma',
        'whitespace, functions, newline between comma and arg',
        'whitespace, functions, newline between arg and parenthesis',
        'whitespace, functions, newlines in a relative singular selector',
        'whitespace, functions, newlines in an absolute singular selector',
        'whitespace, operators, space before ||',
        'whitespace, operators, newline before ||',
        'whitespace, operators, tab before ||',
        'whitespace, operators, return before ||',
        'whitespace, operators, space after ||',
        'whitespace, operators, newline after ||',
        'whitespace, operators, tab after ||',
        'whitespace, operators, return after ||',
        'whitespace, operators, space before &&',
        'whitespace, operators, newline before &&',
        'whitespace, operators, tab before &&',
        'whitespace, operators, return before &&',
        'whitespace, operators, space after &&',
        'whitespace, operators, newline after &&',
        'whitespace, operators, tab after &&',
        'whitespace, operators, return after &&',
        'whitespace, operators, space before ==',
        'whitespace, operators, newline before ==',
        'whitespace, operators, tab before ==',
        'whitespace, operators, return before ==',
        'whitespace, operators, space after ==',
        'whitespace, operators, newline after ==',
        'whitespace, operators, tab after ==',
        'whitespace, operators, return after ==',
        'whitespace, operators, space before !=',
        'whitespace, operators, newline before !=',
        'whitespace, operators, tab before !=',
        'whitespace, operators, return before !=',
        'whitespace, operators, space after !=',
        'whitespace, operators, newline after !=',
        'whitespace, operators, tab after !=',
        'whitespace, operators, return after !=',
        'whitespace, operators, space before <',
        'whitespace, operators, newline before <',
        'whitespace, operators, tab before <',
        'whitespace, operators, return before <',
        'whitespace, operators, space after <',
        'whitespace, operators, newline after <',
        'whitespace, operators, tab after <',
        'whitespace, operators, return after <',
        'whitespace, operators, space before >',
        'whitespace, operators, newline before >',
        'whitespace, operators, tab before >',
        'whitespace, operators, return before >',
        'whitespace, operators, space after >',
        'whitespace, operators, newline after >',
        'whitespace, operators, tab after >',
        'whitespace, operators, return after >',
        'whitespace, operators, space before <=',
        'whitespace, operators, newline before <=',
        'whitespace, operators, tab before <=',
        'whitespace, operators, return before <=',
        'whitespace, operators, space after <=',
        'whitespace, operators, newline after <=',
        'whitespace, operators, tab after <=',
        'whitespace, operators, return after <=',
        'whitespace, operators, space before >=',
        'whitespace, operators, newline before >=',
        'whitespace, operators, tab before >=',
        'whitespace, operators, return before >=',
        'whitespace, operators, space after >=',
        'whitespace, operators, newline after >=',
        'whitespace, operators, tab after >=',
        'whitespace, operators, return after >=',
        'whitespace, operators, space between logical not and test expression',
        'whitespace, operators, newline between logical not and test expression',
        'whitespace, operators, tab between logical not and test expression',
        'whitespace, operators, return between logical not and test expression',
        'whitespace, operators, space between logical not and parenthesized expression',
        'whitespace, operators, newline between logical not and parenthesized expression',
        'whitespace, operators, tab between logical not and parenthesized expression',
        'whitespace, operators, return between logical not and parenthesized expression',
        'whitespace, selectors, space between bracket and selector',
        'whitespace, selectors, newline between bracket and selector',
        'whitespace, selectors, tab between bracket and selector',
        'whitespace, selectors, return between bracket and selector',
        'whitespace, selectors, space between selector and bracket',
        'whitespace, selectors, tab between selector and bracket',
        'whitespace, selectors, return between selector and bracket',
        'whitespace, selectors, newline between selector and comma',
        'whitespace, selectors, newline between comma and selector',
        'whitespace, slice, space between start and colon',
        'whitespace, slice, newline between start and colon',
        'whitespace, slice, tab between start and colon',
        'whitespace, slice, return between start and colon',
        'whitespace, slice, space between colon and end',
        'whitespace, slice, newline between colon and end',
        'whitespace, slice, tab between colon and end',
        'whitespace, slice, return between colon and end',
        'whitespace, slice, space between end and colon',
        'whitespace, slice, newline between end and colon',
        'whitespace, slice, tab between end and colon',
        'whitespace, slice, return between end and colon',
        'whitespace, slice, space between colon and step',
        'whitespace, slice, newline between colon and step',
        'whitespace, slice, tab between colon and step',
        'whitespace, slice, return between colon and step',
        'basic, descendant segment, multiple selectors',
        'basic, descendant segment, object traversal, multiple selectors',
        'basic, bald descendant segment',
        'filter, relative non-singular query, index, equal',
        'filter, relative non-singular query, index, not equal',
        'filter, relative non-singular query, index, less-or-equal',
        'filter, relative non-singular query, name, equal',
        'filter, relative non-singular query, name, not equal',
        'filter, relative non-singular query, name, less-or-equal',
        'filter, relative non-singular query, combined, equal',
        'filter, relative non-singular query, combined, not equal',
        'filter, relative non-singular query, combined, less-or-equal',
        'filter, relative non-singular query, wildcard, equal',
        'filter, relative non-singular query, wildcard, not equal',
        'filter, relative non-singular query, wildcard, less-or-equal',
        'filter, relative non-singular query, slice, equal',
        'filter, relative non-singular query, slice, not equal',
        'filter, relative non-singular query, slice, less-or-equal',
        'filter, absolute non-singular query, index, equal',
        'filter, absolute non-singular query, index, not equal',
        'filter, absolute non-singular query, index, less-or-equal',
        'filter, absolute non-singular query, name, equal',
        'filter, absolute non-singular query, name, not equal',
        'filter, absolute non-singular query, name, less-or-equal',
        'filter, absolute non-singular query, combined, equal',
        'filter, absolute non-singular query, combined, not equal',
        'filter, absolute non-singular query, combined, less-or-equal',
        'filter, absolute non-singular query, wildcard, equal',
        'filter, absolute non-singular query, wildcard, not equal',
        'filter, absolute non-singular query, wildcard, less-or-equal',
        'filter, absolute non-singular query, slice, equal',
        'filter, absolute non-singular query, slice, not equal',
        'filter, absolute non-singular query, slice, less-or-equal',
        'filter, equals, special nothing',
        'filter, group terms, left',
        'index selector, min exact index - 1',
        'index selector, max exact index + 1',
        'index selector, overflowing index',
        'index selector, leading 0',
        'index selector, -0',
        'index selector, leading -0',
        'name selector, double quotes, embedded U+0000',
        'name selector, double quotes, embedded U+0001',
        'name selector, double quotes, embedded U+0002',
        'name selector, double quotes, embedded U+0003',
        'name selector, double quotes, embedded U+0004',
        'name selector, double quotes, embedded U+0005',
        'name selector, double quotes, embedded U+0006',
        'name selector, double quotes, embedded U+0007',
        'name selector, double quotes, embedded U+0008',
        'name selector, double quotes, embedded U+0009',
        'name selector, double quotes, embedded U+000B',
        'name selector, double quotes, embedded U+000C',
        'name selector, double quotes, embedded U+000D',
        'name selector, double quotes, embedded U+000E',
        'name selector, double quotes, embedded U+000F',
        'name selector, double quotes, embedded U+0010',
        'name selector, double quotes, embedded U+0011',
        'name selector, double quotes, embedded U+0012',
        'name selector, double quotes, embedded U+0013',
        'name selector, double quotes, embedded U+0014',
        'name selector, double quotes, embedded U+0015',
        'name selector, double quotes, embedded U+0016',
        'name selector, double quotes, embedded U+0017',
        'name selector, double quotes, embedded U+0018',
        'name selector, double quotes, embedded U+0019',
        'name selector, double quotes, embedded U+001A',
        'name selector, double quotes, embedded U+001B',
        'name selector, double quotes, embedded U+001C',
        'name selector, double quotes, embedded U+001D',
        'name selector, double quotes, embedded U+001E',
        'name selector, double quotes, embedded U+001F',
        'name selector, double quotes, escaped backspace',
        'name selector, double quotes, escaped form feed',
        'name selector, double quotes, escaped line feed',
        'name selector, double quotes, escaped carriage return',
        'name selector, double quotes, escaped tab',
        'name selector, double quotes, escaped ☺, upper case hex',
        'name selector, double quotes, escaped ☺, lower case hex',
        'name selector, double quotes, surrogate pair 𝄞',
        'name selector, double quotes, surrogate pair 😀',
        'name selector, double quotes, before high surrogates',
        'name selector, double quotes, after low surrogates',
        'name selector, double quotes, invalid escaped single quote',
        'name selector, double quotes, question mark escape',
        'name selector, double quotes, bell escape',
        'name selector, double quotes, vertical tab escape',
        'name selector, double quotes, 0 escape',
        'name selector, double quotes, x escape',
        'name selector, double quotes, n escape',
        'name selector, double quotes, unicode escape no hex',
        'name selector, double quotes, unicode escape too few hex',
        'name selector, double quotes, unicode escape upper u',
        'name selector, double quotes, unicode escape upper u long',
        'name selector, double quotes, unicode escape plus',
        'name selector, double quotes, unicode escape brackets',
        'name selector, double quotes, unicode escape brackets long',
        'name selector, double quotes, single high surrogate',
        'name selector, double quotes, single low surrogate',
        'name selector, double quotes, high high surrogate',
        'name selector, double quotes, low low surrogate',
        'name selector, double quotes, surrogate non-surrogate',
        'name selector, double quotes, non-surrogate surrogate',
        'name selector, double quotes, surrogate supplementary',
        'name selector, double quotes, supplementary surrogate',
        'name selector, double quotes, surrogate incomplete low',
        'name selector, single quotes, embedded U+0000',
        'name selector, single quotes, embedded U+0001',
        'name selector, single quotes, embedded U+0002',
        'name selector, single quotes, embedded U+0003',
        'name selector, single quotes, embedded U+0004',
        'name selector, single quotes, embedded U+0005',
        'name selector, single quotes, embedded U+0006',
        'name selector, single quotes, embedded U+0007',
        'name selector, single quotes, embedded U+0008',
        'name selector, single quotes, embedded U+0009',
        'name selector, single quotes, embedded U+000B',
        'name selector, single quotes, embedded U+000C',
        'name selector, single quotes, embedded U+000D',
        'name selector, single quotes, embedded U+000E',
        'name selector, single quotes, embedded U+000F',
        'name selector, single quotes, embedded U+0010',
        'name selector, single quotes, embedded U+0011',
        'name selector, single quotes, embedded U+0012',
        'name selector, single quotes, embedded U+0013',
        'name selector, single quotes, embedded U+0014',
        'name selector, single quotes, embedded U+0015',
        'name selector, single quotes, embedded U+0016',
        'name selector, single quotes, embedded U+0017',
        'name selector, single quotes, embedded U+0018',
        'name selector, single quotes, embedded U+0019',
        'name selector, single quotes, embedded U+001A',
        'name selector, single quotes, embedded U+001B',
        'name selector, single quotes, embedded U+001C',
        'name selector, single quotes, embedded U+001D',
        'name selector, single quotes, embedded U+001E',
        'name selector, single quotes, embedded U+001F',
        'name selector, single quotes, escaped backspace',
        'name selector, single quotes, escaped form feed',
        'name selector, single quotes, escaped line feed',
        'name selector, single quotes, escaped carriage return',
        'name selector, single quotes, escaped tab',
        'name selector, single quotes, escaped ☺, upper case hex',
        'name selector, single quotes, escaped ☺, lower case hex',
        'name selector, single quotes, surrogate pair 𝄞',
        'name selector, single quotes, surrogate pair 😀',
        'name selector, single quotes, invalid escaped double quote',
        'slice selector, excessively large from value with negative step',
        'slice selector, step, min exact - 1',
        'slice selector, step, max exact + 1',
        'slice selector, overflowing to value',
        'slice selector, underflowing from value',
        'slice selector, overflowing from value with negative step',
        'slice selector, underflowing to value with negative step',
        'slice selector, overflowing step',
        'slice selector, underflowing step',
        'slice selector, step, leading 0',
        'slice selector, step, -0',
        'slice selector, step, leading -0',
        'functions, count, count function',
        'functions, count, single-node arg',
        'functions, count, multiple-selector arg',
        'functions, count, non-query arg, number',
        'functions, count, non-query arg, string',
        'functions, count, non-query arg, true',
        'functions, count, non-query arg, false',
        'functions, count, non-query arg, null',
        'functions, count, result must be compared',
        'functions, count, no params',
        'functions, count, too many params',
        'functions, length, string data, unicode',
        'functions, length, result must be compared',
        'functions, length, no params',
        'functions, length, too many params',
        'functions, length, non-singular query arg',
        'functions, length, arg is a function expression',
        'functions, match, regex from the document',
        'functions, match, filter, match function, unicode char class, uppercase',
        'functions, match, filter, match function, unicode char class negated, uppercase',
        'functions, match, filter, match function, unicode, surrogate pair',
        'functions, match, dot matcher on \u2028',
        'functions, match, dot matcher on \u2029',
        'functions, match, result cannot be compared',
        'functions, match, too few params',
        'functions, match, too many params',
        'functions, match, dot in character class',
        'functions, match, escaped dot',
        'functions, match, escaped backslash before dot',
        'functions, match, escaped left square bracket',
        'functions, match, escaped right square bracket',
        'functions, match, explicit caret',
        'functions, match, explicit dollar',
        'functions, search, regex from the document',
        'functions, search, filter, search function, unicode char class, uppercase',
        'functions, search, filter, search function, unicode char class negated, uppercase',
        'functions, search, filter, search function, unicode, surrogate pair',
        'functions, search, dot matcher on \u2028',
        'functions, search, dot matcher on \u2029',
        'functions, search, result cannot be compared',
        'functions, search, too few params',
        'functions, search, too many params',
        'functions, search, dot in character class',
        'functions, search, escaped dot',
        'functions, search, escaped backslash before dot',
        'functions, search, escaped left square bracket',
        'functions, search, escaped right square bracket',
        'functions, value, single-value nodelist',
        'functions, value, too few params',
        'functions, value, too many params',
        'functions, value, result must be compared',
        'whitespace, filter, space between parenthesized expression and bracket',
        'whitespace, filter, tab between parenthesized expression and bracket',
        'whitespace, filter, return between parenthesized expression and bracket',
        'whitespace, functions, space between function name and parenthesis',
        'whitespace, functions, tab between function name and parenthesis',
        'whitespace, functions, return between function name and parenthesis',
        'whitespace, functions, space between parenthesis and arg',
        'whitespace, functions, tab between parenthesis and arg',
        'whitespace, functions, return between parenthesis and arg',
        'whitespace, functions, space between arg and comma',
        'whitespace, functions, tab between arg and comma',
        'whitespace, functions, return between arg and comma',
        'whitespace, functions, space between comma and arg',
        'whitespace, functions, tab between comma and arg',
        'whitespace, functions, return between comma and arg',
        'whitespace, functions, space between arg and parenthesis',
        'whitespace, functions, tab between arg and parenthesis',
        'whitespace, functions, return between arg and parenthesis',
        'whitespace, functions, spaces in a relative singular selector',
        'whitespace, functions, tabs in a relative singular selector',
        'whitespace, functions, returns in a relative singular selector',
        'whitespace, functions, spaces in an absolute singular selector',
        'whitespace, functions, tabs in an absolute singular selector',
        'whitespace, functions, returns in an absolute singular selector',
        'whitespace, selectors, space between root and bracket',
        'whitespace, selectors, newline between root and bracket',
        'whitespace, selectors, tab between root and bracket',
        'whitespace, selectors, return between root and bracket',
        'whitespace, selectors, space between bracket and bracket',
        'whitespace, selectors, newline between bracket and bracket',
        'whitespace, selectors, tab between bracket and bracket',
        'whitespace, selectors, return between bracket and bracket',
        'whitespace, selectors, space between root and dot',
        'whitespace, selectors, newline between root and dot',
        'whitespace, selectors, tab between root and dot',
        'whitespace, selectors, return between root and dot',
        'whitespace, selectors, space between selector and comma',
        'whitespace, selectors, tab between selector and comma',
        'whitespace, selectors, return between selector and comma',
        'whitespace, selectors, space between comma and selector',
        'whitespace, selectors, tab between comma and selector',
        'whitespace, selectors, return between comma and selector',
    ];

    /**
     * @dataProvider complianceCaseProvider
     */
    public function testComplianceTestCase(string $selector, array $document, array $expectedResults, bool $invalidSelector)
    {
        $jsonCrawler = new JsonCrawler(json_encode($document));

        if ($invalidSelector) {
            $this->expectException(JsonCrawlerException::class);
        }

        $result = $jsonCrawler->find($selector);

        if (!$invalidSelector) {
            $this->assertContains($result, $expectedResults);
        }
    }

    public static function complianceCaseProvider(): iterable
    {
        $data = json_decode(file_get_contents(__DIR__ . '/Fixtures/cts.json'), true, flags: JSON_THROW_ON_ERROR);

        foreach ($data['tests'] as $test) {
            if (\in_array($test['name'], self::UNSUPPORTED_TEST_CASES, true)) {
                continue;
            }

            yield $test['name'] => [
                $test['selector'],
                $test['document'] ?? [],
                isset($test['result']) ? [$test['result']] : ($test['results'] ?? []),
                $test['invalid_selector'] ?? false,
            ];
        }
    }
}
